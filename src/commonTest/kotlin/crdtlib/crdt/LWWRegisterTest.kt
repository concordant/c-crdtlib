/*
* MIT License
*
* Copyright Â© 2022, Concordant and contributors.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
* associated documentation files (the "Software"), to deal in the Software without restriction,
* including without limitation the rights to use, copy, modify, merge, publish, distribute,
* sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all copies or
* substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
* NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
* DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

package crdtlib.crdt

import crdtlib.utils.ClientUId
import crdtlib.utils.ReadOnlyEnvironment
import crdtlib.utils.SimpleEnvironment
import io.kotest.assertions.throwables.shouldThrow
import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.nulls.shouldBeNull
import io.kotest.matchers.shouldBe

/**
 * Represents a test suite for LWWRegister.
 */
class LWWRegisterTest : StringSpec({

    val uid1 = ClientUId("clientid1")
    val uid2 = ClientUId("clientid2")
    var client1 = SimpleEnvironment(uid1)
    var client2 = SimpleEnvironment(uid2)

    beforeTest {
        client1 = SimpleEnvironment(uid1)
        client2 = SimpleEnvironment(uid2)
    }

    /**
     * This test evaluates the scenario: create an empty register, get.
     * Call to get should return null.
     */
    "create empty register and get" {
        val reg = LWWRegister()

        reg.get().shouldBeNull()
    }

    /**
     * This test evaluates the scenario: create get.
     * Call to get should return the value assigned by the constructor.
     */
    "create register and get" {
        val reg = LWWRegister("value", client1)

        reg.get().shouldBe("value")
    }

    /**
     * This test evaluates the scenario: create assign get.
     * Call to get should return the value set by the assign method.
     */
    "create, assign, get" {
        val reg = LWWRegister("value1", client1)
        reg.assign("value2")

        reg.get().shouldBe("value2")
    }

    /**
     * This test evaluates the scenario: create empy || assign merge get.
     * Call to get should return the value set in the second replica.
     */
    "R1: create empty; R2: create with greater timestamp, merge, get" {
        val value = "value"

        val reg1 = LWWRegister(client1)
        val reg2 = LWWRegister(value, client2)
        reg1.merge(reg2)
        reg2.merge(reg1)

        reg1.get().shouldBe(value)
        reg2.get().shouldBe(value)
    }

    /**
     * This test evaluates the scenario: assign || assign merge get.
     * Call to get should return the value set in the second replica.
     */
    "R1: create; R2: create with greater timestamp, merge, get" {
        val reg1 = LWWRegister("value1", client1)
        val reg2 = LWWRegister("value2", client2)
        reg1.merge(reg2)
        reg2.merge(reg1)

        reg1.get().shouldBe("value2")
        reg2.get().shouldBe("value2")
    }

    /**
     * This test evaluates the scenario: assign || assign merge assign get.
     * Call to get should return the value set by call to assign method in the second replica.
     */
    "R1: create; R2: create, merge, assign, get" {
        val reg1 = LWWRegister("value1", client1)
        val reg2 = LWWRegister("value2", client2)
        reg2.merge(reg1)
        reg2.assign("value3")

        reg2.get().shouldBe("value3")
    }

    /**
     * This test evaluates the use of delta return by call to assign method.
     * Call to get should return last value set in the second replica.
     */
    "use delta generated by assign" {
        val reg1 = LWWRegister("value1", client1)
        val reg2 = LWWRegister("value2", client2)

        val returnedAssignOp1 = reg1.assign("value3")
        val assignOp1 = client1.popWrite().second
        returnedAssignOp1.shouldBe(assignOp1)
        val returnedAssignOp2 = reg2.assign("value4")
        val assignOp2 = client2.popWrite().second
        returnedAssignOp2.shouldBe(assignOp2)

        reg1.merge(assignOp2)
        reg2.merge(assignOp1)

        reg1.get().shouldBe("value4")
        reg2.get().shouldBe("value4")
    }

    /**
     * This test evaluates the generation of delta plus its merging into another replica.
     * Call to get should return the values set in the second replica.
     */
    "generate delta then merge" {
        val reg1 = LWWRegister("value1", client1)
        val reg2 = LWWRegister("value2", client2)
        val vv1 = client1.getState()
        val vv2 = client2.getState()
        val delta2 = reg1.generateDelta(vv2)
        val delta1 = reg2.generateDelta(vv1)

        reg1.merge(delta1)
        reg2.merge(delta2)

        reg1.get().shouldBe("value2")
        reg2.get().shouldBe("value2")
    }

    "Read Only Environment" {
        client1 = ReadOnlyEnvironment(uid1)
        val reg = LWWRegister("value1", client1)

        shouldThrow<RuntimeException> {
            reg.assign("value2")
        }
        reg.get().shouldBe("value1")
    }

    /**
     * This test evaluates JSON serialization of an empty lww register.
     */
    "empty JSON serialization" {
        val reg = LWWRegister()
        val regJson = reg.toJson()

        regJson.shouldBe("""{"type":"LWWRegister","metadata":null,"value":null}""")
    }

    /**
     * This test evaluates JSON deserialization of an empty lww register.
     */
    "empty JSON deserialization" {
        val regJson = LWWRegister.fromJson("""{"type":"LWWRegister","metadata":null,"value":null}""")

        regJson.get().shouldBeNull()
    }
    /**
     * This test evaluates JSON serialization of a lww register.
     */
    "JSON serialization" {
        val value = "value"

        val reg = LWWRegister(value, client1)
        val regJson = reg.toJson()

        regJson.shouldBe("""{"type":"LWWRegister","metadata":{"uid":{"name":"clientid1"},"cnt":-2147483647},"value":"value"}""")
    }

    /**
     * This test evaluates JSON deserialization of a lww register.
     */
    "JSON deserialization" {
        val regJson = LWWRegister.fromJson("""{"type":"LWWRegister","metadata":{"uid":{"name":"clientid"},"cnt":-2147483647},"value":"value"}""")

        regJson.get().shouldBe("value")
    }
})
